{"version":3,"sources":["pages/Graphapp.tsx","helpers/Stack.ts","algorithms/Algorithm.ts","algorithms/DFS.ts","helpers/Queue.ts","algorithms/BFS.ts","helpers/PriorityQueue.ts","algorithms/Dijkstra.ts","algorithms/Astar.ts","components/Node.tsx","components/Grid.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Algorithms","Stack","arr","item","this","push","pop","length","Algorithm","graph","startNode","i","j","start","endNode","end","adjList","wall","DFS","nodes","findStartNode","findEndNode","getAdjList","stack","order","isEmpty","curr","x","y","visited","forEach","neighbour","Queue","shift","BFS","queue","enqueue","dequeue","PriorityQueue","prio","sort","a","b","contains","itemInQ","newPrio","Dijkstra","prioQueue","node","distance","Infinity","prevNode","undefined","alternativ","path","distX","distY","Math","sqrt","pow","Astar","Set","value","f","h","updateKey","Node","props","backgroundStyle","backgroundColor","onMouseOver","className","style","React","Component","Grid","STARTX","STARTY","ENDX","ENDY","state","initNodes","holdMouseDown","startX","startY","endX","endY","height","width","clearOrder","clearVisited","setState","nodesVisited","graphWithPath","algorithm","findPath","newNodes","clearWalls","clearDistanceAndPrevNode","changeStartNode","changeEndNode","gridStyle","gridTemplateColumns","gridTemplateRows","nodesElements","changeBackgroundWall","bind","htmlFor","type","min","max","name","placeholder","onChange","event","Number","parseInt","target","Button","onClick","resetStartAndEnd","calculatePath","clearPath","clearEverything","id","onMouseDown","onMouseUp","Graphapp","WIDTH","HEIGHT","DropdownButton","variant","title","toString","Dropdown","Item","as","changeAlgorithm","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iOAkBKA,E,iHCEUC,E,WAjBX,aAAe,yBAFPC,IAAW,G,wCAMnB,SAAKC,GACDC,KAAKF,IAAIG,KAAKF,K,iBAGlB,WACI,OAAOC,KAAKF,IAAII,Q,qBAGpB,WACI,OAA2B,IAApBF,KAAKF,IAAIK,W,KCsDTC,E,6FAjEX,SAAwBC,GAGpB,IAFA,IAAIC,EAEIC,EAAI,EAAGA,EAAIF,EAAMF,OAAQI,IAC7B,IAAI,IAAIC,EAAI,EAAGA,EAAIH,EAAME,GAAGJ,OAAQK,IAChC,GAAGH,EAAME,GAAGC,GAAGC,MAAO,CAClBH,EAAYD,EAAME,GAAGC,GACrB,MAIZ,OAAOF,I,yBAGX,SAAsBD,GAGlB,IAFA,IAAIK,EAEIH,EAAI,EAAGA,EAAIF,EAAMF,OAAQI,IAC7B,IAAI,IAAIC,EAAI,EAAGA,EAAIH,EAAME,GAAGJ,OAAQK,IAChC,GAAGH,EAAME,GAAGC,GAAGG,IAAK,CAChBD,EAAUL,EAAME,GAAGC,GACnB,MAIZ,OAAOE,I,wBAGX,SAAqBL,GAGjB,IAFA,IAAMO,EAAuB,GAErBL,EAAI,EAAGA,EAAIF,EAAMF,OAAQI,IAAK,CAClCK,EAAQL,GAAK,GACb,IAAI,IAAIC,EAAI,EAAGA,EAAIH,EAAME,GAAGJ,OAAQK,IAChCI,EAAQL,GAAGC,GAAK,GAEZH,EAAME,GAAGC,GAAGK,OAGTR,EAAME,EAAE,IAAMF,EAAME,EAAE,GAAGC,KAAOH,EAAME,EAAE,GAAGC,GAAGK,MAC7CD,EAAQL,GAAGC,GAAGP,KAAKI,EAAME,EAAE,GAAGC,IAI/BH,EAAME,GAAGC,EAAE,KAAOH,EAAME,GAAGC,EAAE,GAAGK,MAC/BD,EAAQL,GAAGC,GAAGP,KAAKI,EAAME,GAAGC,EAAE,IAI/BH,EAAME,EAAE,IAAMF,EAAME,EAAE,GAAGC,KAAOH,EAAME,EAAE,GAAGC,GAAGK,MAC7CD,EAAQL,GAAGC,GAAGP,KAAKI,EAAME,EAAE,GAAGC,IAI/BH,EAAME,GAAGC,EAAE,KAAOH,EAAME,GAAGC,EAAE,GAAGK,MAC/BD,EAAQL,GAAGC,GAAGP,KAAKI,EAAME,GAAGC,EAAE,KAM9C,OAAOI,M,KCjBAE,E,8JAzCX,SAAST,GACL,IAAMU,EAAK,YAAOV,GACZC,EAAYN,KAAKgB,cAAcD,GAC/BL,EAAUV,KAAKiB,YAAYF,GAC3BH,EAAUZ,KAAKkB,WAAWH,GAE1BI,EAAsB,IAAItB,EAEhCsB,EAAMlB,KAAKK,GAGX,IAFA,IAAIc,EAAgB,GAEbD,EAAME,WAAW,CACpB,IAAMC,EAAOH,EAAMjB,MAGnB,GAAGoB,EAAKC,IAAMb,EAAQa,GAAKD,EAAKE,IAAMd,EAAQc,EAAG,CAC7Cd,EAAQU,MAAQA,EAChB,MAGAE,EAAKG,UACLH,EAAKG,SAAU,EACfH,EAAKF,MAAQA,EACbA,IACAR,EAAQU,EAAKC,GAAGD,EAAKE,GAAGE,SAAQ,SAACC,GAC7BR,EAAMlB,KAAK0B,OAQvB,OAAOZ,I,sBAGX,WACI,MAAO,U,GAvCGX,GCcHwB,E,WAjBX,aAAe,yBAFP9B,IAAW,G,2CAMnB,SAAQC,GACJC,KAAKF,IAAIG,KAAKF,K,qBAGlB,WACI,OAAOC,KAAKF,IAAI+B,U,qBAGpB,WACI,OAA2B,IAApB7B,KAAKF,IAAIK,W,KC6BT2B,E,8JAvCX,SAASzB,GACL,IAAMU,EAAK,YAAOV,GACZC,EAAYN,KAAKgB,cAAcD,GAC/BL,EAAUV,KAAKiB,YAAYF,GAC3BH,EAAUZ,KAAKkB,WAAWH,GAE1BgB,EAAsB,IAAIH,EAEhCtB,EAAUmB,SAAU,EACpBM,EAAMC,QAAQ1B,GAGd,IAFA,IAAIc,EAAgB,GAEbW,EAAMV,WAAW,CACpB,IAAMC,EAAOS,EAAME,UAGnB,GAAGX,EAAKC,IAAMb,EAAQa,GAAKD,EAAKE,IAAMd,EAAQc,EAAG,CAC7Cd,EAAQU,MAAQA,EAChB,MAGJR,EAAQU,EAAKC,GAAGD,EAAKE,GAAGE,SAAQ,SAACC,GACzBA,EAAUF,UACVE,EAAUF,SAAU,EACpBM,EAAMC,QAAQL,GACdA,EAAUP,MAAQA,EAClBA,QAKZ,OAAOL,I,sBAGX,WACI,MAAO,U,GArCGX,GCoDH8B,E,WA7CX,aAAe,yBAFfpC,IAAqB,G,2CAMrB,SAAQqC,EAAcpC,GAClBC,KAAKF,IAAIG,KAAK,CAACkC,OAAMpC,SACrBC,KAAKoC,S,kBAGT,WACIpC,KAAKF,IAAIsC,MAAK,SAACC,EAAgBC,GAC3B,OAAOD,EAAEF,KAAOG,EAAEH,U,qBAI1B,WAA0B,IAAD,EACrB,iBAAOnC,KAAKF,IAAI+B,eAAhB,aAAO,EAAkB9B,O,qBAG7B,WACI,OAA2B,IAApBC,KAAKF,IAAIK,S,sBAGpB,SAASJ,GACL,IAAIwC,GAAW,EAOf,OANAvC,KAAKF,IAAI4B,SAAQ,SAACc,GACXzC,GAAQyC,EAAQzC,OACfwC,GAAW,MAIZA,I,uBAGX,SAAUE,EAAiB1C,GACvBC,KAAKF,IAAI4B,SAAQ,SAACc,GACXzC,GAAQyC,EAAQzC,OACfyC,EAAQL,KAAOM,MAIvBzC,KAAKoC,W,KCwBEM,E,8JApEX,SAASrC,GAA8B,IAAD,OAC5BU,EAAK,YAAOV,GACZC,EAAYN,KAAKgB,cAAcD,GAC/BL,EAAUV,KAAKiB,YAAYF,GAC3BH,EAAUZ,KAAKkB,WAAWH,GAG1B4B,EAAkC,IAAIT,EAE5CnB,EAAMW,SAAQ,SAAA5B,GACVA,EAAI4B,SAAQ,SAAAkB,GACRA,EAAKC,SAAWC,IAChBF,EAAKG,cAAWC,QAIxB1C,EAAUuC,SAAW,EACrBvC,EAAUmB,SAAU,EAEpBkB,EAAUX,QAAQ1B,EAAUuC,SAAUvC,GAEtC,IArBkC,iBAsB9B,IAAMgB,EAAOqB,EAAUV,UAEvBrB,EAAQU,EAAKC,GAAGD,EAAKE,GAAGE,SAAQ,SAACC,GAC7B,IAAMsB,EAAa3B,EAAKuB,SAAY,EAAKA,SAASvB,EAAMK,GACrDsB,EAAatB,EAAUkB,WAEtBlB,EAAUkB,SAAWI,EACrBtB,EAAUoB,SAAWzB,EACrBqB,EAAUX,QAAQL,EAAUkB,SAAUlB,SAT3CgB,EAAUtB,WAAY,IAiB7B,IAFA,IAAI6B,EAAgB,CAACxC,GACjBY,EAAOZ,OACasC,GAAjB1B,EAAKyB,UAERG,EAAI,CADJ5B,EAAOA,EAAKyB,UACR,mBAAaG,IAKrB,IAFA,IAAI9B,EAAgB,EAEZb,EAAI,EAAGA,EAAI2C,EAAK/C,OAAQI,IAEzBG,GAAWwC,EAAK,KACfA,EAAK3C,GAAGkB,SAAU,EAClByB,EAAK3C,GAAGa,MAAQA,EAChBA,KAIR,OAAOL,I,sBAGX,SAAiBsB,EAAUC,GACvB,IAAMa,EAAQd,EAAEd,EAAIe,EAAEf,EAChB6B,EAAQf,EAAEb,EAAIc,EAAEd,EACtB,OAAO6B,KAAKC,KAAKD,KAAKE,IAAIJ,EAAM,GAAKE,KAAKE,IAAIH,EAAM,M,sBAGxD,WACI,MAAO,e,GAlEQhD,GCmGRoD,E,8JAnGX,SAASnD,GAA8B,IAAD,OAC5BU,EAAK,YAAOV,GACZC,EAAYN,KAAKgB,cAAcD,GAC/BL,EAAUV,KAAKiB,YAAYF,GAC3BH,EAAUZ,KAAKkB,WAAWH,GAG1B4B,EAAkC,IAAIT,EACb,IAAIuB,IAEnC1C,EAAMW,SAAQ,SAAA5B,GACVA,EAAI4B,SAAQ,SAAAkB,GACRA,EAAKC,SAAW,EAChBD,EAAKG,cAAWC,QAIxB1C,EAAUuC,SAAW,EACrBF,EAAUX,QAAQ,EAAG1B,GAlBa,iBAqB9B,IAAMgB,EAAOqB,EAAUV,UAEvB,GAAGX,EAAKC,IAAMb,EAAQa,GAAKD,EAAKE,IAAMd,EAAQc,EAC1C,cAGJF,EAAKG,SAAU,EAEfb,EAAQU,EAAKC,GAAGD,EAAKE,GAAGE,SAAQ,SAACC,GAC7B,IAAIA,EAAUF,QAAS,CAGnB,IAAMiC,EAAQpC,EAAKuB,SAAY,EAAKA,SAASvB,EAAKK,GAG7CgB,EAAUJ,SAASZ,IAAc+B,GAAS/B,EAAUkB,WACrDlB,EAAUoB,SAAWzB,GAKzBK,EAAUkB,SAAWa,EAErB,IAAMC,EAAID,EAAQ,EAAKE,EAAEjC,EAAWjB,GAEjCiC,EAAUJ,SAASZ,GAElBgB,EAAUkB,UAAUF,EAAGhC,GAEvBgB,EAAUX,QAAQ2B,EAAGhC,QA9BrC,EAAG,kBAIK,aA+BCgB,EAAUtB,WAOnB,IAFA,IAAI6B,EAAgB,CAACxC,GACjBY,EAAOZ,OACasC,GAAjB1B,EAAKyB,UAERG,EAAI,CADJ5B,EAAOA,EAAKyB,UACR,mBAAaG,IAKrB,IAFA,IAAI9B,EAAgB,EAEZb,EAAI,EAAGA,EAAI2C,EAAK/C,OAAQI,IAEzBG,GAAWwC,EAAK,KACfA,EAAK3C,GAAGkB,SAAU,EAClByB,EAAK3C,GAAGa,MAAQA,EAChBA,KAGR,OAAOL,I,sBAGX,SAAiBsB,EAAUC,GACvB,IAAMa,EAAQd,EAAEd,EAAIe,EAAEf,EAChB6B,EAAQf,EAAEb,EAAIc,EAAEd,EACtB,OAAO6B,KAAKC,KAAKD,KAAKE,IAAIJ,EAAM,GAAKE,KAAKE,IAAIH,EAAM,M,eAIxD,SAAUzB,EAAkBjB,GAExB,IAAMyC,EAAQxB,EAAUJ,EAAIb,EAAQa,EAC9B6B,EAAQzB,EAAUH,EAAId,EAAQc,EACpC,OAAO6B,KAAKC,KAAKD,KAAKE,IAAIJ,EAAM,GAAKE,KAAKE,IAAIH,EAAM,M,sBAGxD,WACI,MAAO,S,GAjGKhD,G,qBC+CL0D,E,kDAtCX,WAAYC,GAA6B,uCACjCA,G,0CAGR,WAAU,IAAD,OAEDC,EAAuC,GAwB3C,OArBIA,EADDhE,KAAK+D,MAAMnB,KAAKnC,MACG,CACdwD,gBAAiB,cAEfjE,KAAK+D,MAAMnB,KAAKjC,IACJ,CACdsD,gBAAiB,OAEfjE,KAAK+D,MAAMnB,KAAK/B,KACJ,CACdoD,gBAAiB,QAEfjE,KAAK+D,MAAMnB,KAAKnB,QACJ,CACdwC,gBAAiB,SAGH,CACdA,gBAAiB,aAKrB,qBAAKC,YAAa,kBAAM,EAAKH,MAAMG,YAAY,EAAKH,MAAMnB,OAAOuB,UAAU,OAAOC,MAAOJ,EAAzF,SACKhE,KAAK+D,MAAMnB,KAAKxB,OAAmC,IAA1BpB,KAAK+D,MAAMnB,KAAKxB,MAAc,mBAAG+C,UAAU,YAAb,SAA0BnE,KAAK+D,MAAMnB,KAAKxB,QAAa,W,GAlC5GiD,IAAMC,W,QC6PVC,E,kDA1OX,WAAYR,GAA6B,IAAD,8BACtC,cAAMA,IANSS,OAAiB,GAKM,EAJvBC,OAAiB,GAIM,EAHvBC,KAAe,GAGQ,EAFvBC,KAAe,GAK9B,EAAKC,MAAQ,CACX7D,MAAO,EAAK8D,YACZC,eAAe,EACfC,OAAQ,EAAKP,OACbQ,OAAQ,EAAKP,OACbQ,KAAM,EAAKP,KACXQ,KAAM,EAAKP,MATyB,E,6CAaxC,WAGI,IAFA,IAAM5D,EAAmB,GAEjBR,EAAI,EAAGA,EAAIP,KAAK+D,MAAMoB,OAAQ5E,IAAK,CACvCQ,EAAMR,GAAK,GACX,IAAI,IAAIC,EAAI,EAAGA,EAAIR,KAAK+D,MAAMqB,MAAO5E,IAAK,CAEtC,IAAMoC,EAAc,CAChBrB,EAAGhB,EACHiB,EAAGhB,EACHC,OAAO,EACPE,KAAK,EACLE,MAAM,GAMPN,GAAKP,KAAKyE,QAAUjE,GAAKR,KAAKwE,OAC7B5B,EAAKnC,OAAQ,EACPF,GAAKP,KAAK2E,MAAQnE,GAAKR,KAAK0E,OAClC9B,EAAKjC,KAAM,GAEfI,EAAMR,GAAGC,GAAKoC,GAGtB,OAAO7B,I,2BAGX,WACIf,KAAKqF,aACLrF,KAAKsF,eACLtF,KAAKuF,SAAS,CAAEC,kBAAcxC,IAC9B,IAAMyC,EAAgBzF,KAAK+D,MAAM2B,UAAUC,SAAS3F,KAAK4E,MAAM7D,OAC/Df,KAAKuF,SAAS,CACVxE,MAAO0E,EACPD,aAAcC,EAAczF,KAAK4E,MAAMM,MAAMlF,KAAK4E,MAAMK,MAAM7D,U,wBAItE,WACI,IAAMwE,EAAQ,YAAO5F,KAAK4E,MAAM7D,OAChC6E,EAASlE,SAAQ,SAAC5B,GACdA,EAAI4B,SAAQ,SAACkB,GACTA,EAAK/B,MAAO,QAGpBb,KAAKuF,SAAS,CACVxE,MAAO6E,M,sCAIf,WACI,IAAMA,EAAQ,YAAO5F,KAAK4E,MAAM7D,OAChC6E,EAASlE,SAAQ,SAAC5B,GACdA,EAAI4B,SAAQ,SAACkB,GACTA,EAAKC,cAAWG,EAChBJ,EAAKG,cAAWC,QAGxBhD,KAAKuF,SAAS,CACVxE,MAAO6E,EACPJ,kBAAcxC,M,wBAItB,WACI,IAAM4C,EAAQ,YAAO5F,KAAK4E,MAAM7D,OAChC6E,EAASlE,SAAQ,SAAC5B,GACdA,EAAI4B,SAAQ,SAACkB,GACTA,EAAKxB,WAAQ4B,QAGrBhD,KAAKuF,SAAS,CACVxE,MAAO6E,EACPJ,kBAAcxC,M,0BAItB,WACI,IAAM4C,EAAQ,YAAO5F,KAAK4E,MAAM7D,OAChC6E,EAASlE,SAAQ,SAAC5B,GACdA,EAAI4B,SAAQ,SAACkB,GACTA,EAAKnB,SAAU,QAGvBzB,KAAKuF,SAAS,CACVxE,MAAO6E,EACPJ,kBAAcxC,M,6BAItB,WACIhD,KAAK6F,aACL7F,KAAKsF,eACLtF,KAAKqF,aACLrF,KAAK8F,6B,uBAGT,WACI9F,KAAKsF,eACLtF,KAAKqF,e,kCAGT,SAA6BzC,GACzB,GAAG5C,KAAK4E,MAAME,cAAe,CACzB,IAAMc,EAAQ,YAAO5F,KAAK4E,MAAM7D,OAChC6E,EAAShD,EAAKrB,GAAGqB,EAAKpB,GAAGX,MAAO,EAChCb,KAAKuF,SAAS,CACVxE,MAAO6E,O,6BAKnB,SAAwBrE,EAAWC,GAC/B,IAAMoE,EAAQ,YAAO5F,KAAK4E,MAAM7D,OAChC6E,EAASlE,SAAQ,SAAA5B,GACbA,EAAI4B,SAAQ,SAAAkB,GAELA,EAAKnC,QACJmC,EAAKnC,OAAQ,GAIdmC,EAAKrB,IAAMC,GAAKoB,EAAKpB,IAAMD,IAC1BqB,EAAKnC,OAAQ,SAIzBT,KAAKuF,SAAS,CACVxE,MAAO6E,EACPb,OAAQxD,EACRyD,OAAQxD,M,2BAIhB,SAAsBD,EAAWC,GAC7B,IAAMoE,EAAQ,YAAO5F,KAAK4E,MAAM7D,OAChC6E,EAASlE,SAAQ,SAAA5B,GACbA,EAAI4B,SAAQ,SAAAkB,GAELA,EAAKjC,MACJiC,EAAKjC,KAAM,GAIZiC,EAAKrB,IAAMC,GAAKoB,EAAKpB,IAAMD,IAC1BqB,EAAKjC,KAAM,SAMvBX,KAAKuF,SAAS,CACVxE,MAAO6E,EACPX,KAAM1D,EACN2D,KAAM1D,M,8BAMd,WACIxB,KAAK+F,gBAAgB/F,KAAKwE,OAAQxE,KAAKyE,QACvCzE,KAAKgG,cAAchG,KAAK0E,KAAM1E,KAAK2E,Q,oBAIvC,WAQI,IARM,IAAD,OACCsB,EAAiC,CACnCC,oBAAoB,UAAD,OAAYlG,KAAK+D,MAAMqB,MAAvB,wBACnBe,iBAAiB,UAAD,OAAYnG,KAAK+D,MAAMoB,OAAvB,yBAGdiB,EAA+B,GAE7B7F,EAAI,EAAGA,EAAIP,KAAK+D,MAAMoB,OAAQ5E,IAClC,IAAI,IAAIC,EAAI,EAAGA,EAAIR,KAAK+D,MAAMqB,MAAO5E,IACjC4F,EAAcnG,KAAK,cAAC,EAAD,CAAwB2C,KAAM5C,KAAK4E,MAAM7D,MAAMR,GAAGC,GAAI0D,YAAalE,KAAKqG,qBAAqBC,KAAKtG,OAAlG,UAAcO,EAAd,YAAmBC,KAI9C,OAII,sBAAK2D,UAAU,UAAf,UAEI,sBAAKA,UAAU,gBAAf,UACI,wBAAOoC,QAAQ,QAAf,oBACW,uBAAOC,KAAK,SAASC,IAAI,IAAIC,IAAI,KAAKC,KAAK,QAAQC,YAAY,IAAIC,SAAU,SAAAC,GAAK,OAAI,EAAKf,gBAAgBgB,OAAOC,SAASF,EAAMG,OAAOvD,OAAQ,EAAKkB,MAAMI,WAClK,uBAAOwB,KAAK,SAASC,IAAI,IAAIC,IAAI,KAAKE,YAAY,IAAIC,SAAU,SAAAC,GAAK,OAAI,EAAKf,gBAAgB,EAAKnB,MAAMG,OAAQgC,OAAOC,SAASF,EAAMG,OAAOvD,cAGlJ,wBAAO6C,QAAQ,MAAMpC,UAAU,WAA/B,kBACS,uBAAOqC,KAAK,SAASC,IAAI,IAAIC,IAAI,KAAKE,YAAY,IAAIC,SAAU,SAAAC,GAAK,OAAI,EAAKd,cAAce,OAAOC,SAASF,EAAMG,OAAOvD,OAAQ,EAAKkB,MAAMM,SACjJ,uBAAQsB,KAAK,SAASC,IAAI,IAAIC,IAAI,KAAKE,YAAY,IAAIC,SAAU,SAAAC,GAAK,OAAI,EAAKd,cAAc,EAAKpB,MAAMK,KAAM8B,OAAOC,SAASF,EAAMG,OAAOvD,cAG/I,cAACwD,EAAA,EAAD,CAAQ/C,UAAU,kBAAkBgD,QAAS,kBAAM,EAAKC,oBAAxD,oCAIJ,sBAAKjD,UAAU,UAAf,UACI,cAAC+C,EAAA,EAAD,CAAQ/C,UAAU,kBAAkBgD,QAAS,kBAAM,EAAKE,iBAAxD,wBACA,cAACH,EAAA,EAAD,CAAQ/C,UAAU,kBAAkBgD,QAAS,kBAAM,EAAKtB,cAAxD,yBACA,cAACqB,EAAA,EAAD,CAAQ/C,UAAU,oBAAoBgD,QAAS,kBAAM,EAAKG,aAA1D,wBACA,cAACJ,EAAA,EAAD,CAAQ/C,UAAU,iBAAkBgD,QAAS,kBAAM,EAAKI,mBAAxD,iCAEJ,mBAAGC,GAAG,WAAN,6DACA,qBAAKC,YAAa,kBAAM,EAAKlC,SAAS,CAACT,eAAe,KAAQ4C,UAAW,kBAAM,EAAKnC,SAAS,CAACT,eAAe,KAASX,UAAU,iBAAiBC,MAAO6B,EAAxJ,SACCG,IAEApG,KAAK4E,MAAMY,aAAe,oBAAGrB,UAAU,iBAAb,6CAA4DnE,KAAK4E,MAAMY,gBAClG,mBAAGrB,UAAU,iBAAb,wD,GAzOGE,IAAMC,Y,SVNpB1E,O,aAAAA,I,aAAAA,I,iBAAAA,I,wBAAAA,M,SAmDU+H,E,kDA7CX,WAAY5D,GAAsB,IAAD,8BAC/B,cAAMA,IAJS6D,MAAgB,GAGA,EAFhBC,OAAiB,GAKhC,EAAKjD,MAAQ,CACTc,UAAW,IAAI5E,GAJY,E,mDAQjC,SAAwB4E,GACpB,OAAOA,GACH,KAAK9F,EAAWkB,IACZd,KAAKuF,SAAS,CAAEG,UAAW,IAAI5E,IAC/B,MAEJ,KAAKlB,EAAWkC,IACZ9B,KAAKuF,SAAS,CAAEG,UAAW,IAAI5D,IAC/B,MAEJ,KAAKlC,EAAW4D,MACZxD,KAAKuF,SAAS,CAAEG,UAAW,IAAIlC,IAC/B,MAEJ,KAAK5D,EAAW8C,SAAU1C,KAAKuF,SAAS,CAAEG,UAAW,IAAIhD,O,oBAIjE,WAAU,IAAD,OACL,OACI,sBAAKyB,UAAU,OAAf,UACI,sBAAKA,UAAU,YAAf,UACI,eAAC2D,EAAA,EAAD,CAAgBN,GAAG,uBAAuBO,QAAQ,YAAYC,MAAK,UAAKhI,KAAK4E,MAAMc,UAAUuC,YAA7F,UACI,cAACC,EAAA,EAASC,KAAV,CAAeC,GAAG,SAASjB,QAAS,kBAAM,EAAKkB,gBAAgBzI,EAAWkB,MAA1E,sCACA,cAACoH,EAAA,EAASC,KAAV,CAAeC,GAAG,SAASjB,QAAS,kBAAM,EAAKkB,gBAAgBzI,EAAWkC,MAA1E,wCACA,cAACoG,EAAA,EAASC,KAAV,CAAeC,GAAG,SAASjB,QAAS,kBAAM,EAAKkB,gBAAgBzI,EAAW8C,WAA1E,sBACA,cAACwF,EAAA,EAASC,KAAV,CAAeC,GAAG,SAASjB,QAAS,kBAAM,EAAKkB,gBAAgBzI,EAAW4D,QAA1E,mBAEHxD,KAAK4E,MAAMc,UAAY,oBAAGvB,UAAU,gBAAb,gCAAiDnE,KAAK4E,MAAMc,UAAUuC,cAAkB,mBAAG9D,UAAU,gBAAb,oCAGpH,cAAC,EAAD,CAAMiB,MAAOpF,KAAK4H,MAAOzC,OAAQnF,KAAK6H,OAAQnC,UAAW1F,KAAK4E,MAAMc,mB,GA3C7DrB,IAAMC,WWNdgE,MARf,WACE,OACE,qBAAKnE,UAAU,MAAf,SACE,cAAC,EAAD,OCKSoE,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ebaced84.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './Graphapp.css'\r\nimport Button from 'react-bootstrap/Button'\r\nimport { Dropdown, DropdownButton } from \"react-bootstrap\";\r\nimport DFS from \"../algorithms/DFS\";\r\nimport BFS from \"../algorithms/BFS\";\r\nimport Dijkstra from \"../algorithms/Dijkstra\";\r\nimport Astar from \"../algorithms/Astar\";\r\nimport Algorithm from \"../algorithms/Algorithm\"\r\nimport Grid from \"../components/Grid\";\r\n\r\n\r\n\r\ninterface GraphappState {\r\n    algorithm: Algorithm;\r\n    \r\n}\r\n\r\nenum Algorithms {DFS, BFS, Astar, Dijkstra}\r\n\r\nclass Graphapp extends React.Component<{}, GraphappState> {\r\n    private readonly WIDTH: number = 50;\r\n    private readonly HEIGHT: number = 26;\r\n\r\n    constructor(props: Readonly<{}>) {\r\n      super(props);\r\n\r\n      this.state = {\r\n          algorithm: new DFS(),\r\n      };\r\n    }\r\n\r\n    private changeAlgorithm(algorithm: Algorithms): void {\r\n        switch(algorithm) {\r\n            case Algorithms.DFS: {\r\n                this.setState({ algorithm: new DFS()});\r\n                break;\r\n            }\r\n            case Algorithms.BFS: {\r\n                this.setState({ algorithm: new BFS()});\r\n                break;\r\n            }\r\n            case Algorithms.Astar: {\r\n                this.setState({ algorithm: new Astar()});\r\n                break;\r\n            }\r\n            case Algorithms.Dijkstra: this.setState({ algorithm: new Dijkstra()})\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"site\">\r\n                <div className=\"buttonBar\">\r\n                    <DropdownButton id=\"dropdown-item-button\" variant=\"secondary\" title={`${this.state.algorithm.toString()}`}>\r\n                        <Dropdown.Item as=\"button\" onClick={() => this.changeAlgorithm(Algorithms.DFS)}>Depth-first-search (DFS)</Dropdown.Item>\r\n                        <Dropdown.Item as=\"button\" onClick={() => this.changeAlgorithm(Algorithms.BFS)}>Breadth-first-search (BFS)</Dropdown.Item>\r\n                        <Dropdown.Item as=\"button\" onClick={() => this.changeAlgorithm(Algorithms.Dijkstra)}>Dijkstra</Dropdown.Item>\r\n                        <Dropdown.Item as=\"button\" onClick={() => this.changeAlgorithm(Algorithms.Astar)}>A*</Dropdown.Item>\r\n                    </DropdownButton>\r\n                    {this.state.algorithm ? <p className=\"algorithmText\">Current algorithm: {this.state.algorithm.toString()}</p> : <p className=\"algorithmText\">No algorithm chosen</p>}\r\n                </div>\r\n\r\n                <Grid width={this.WIDTH} height={this.HEIGHT} algorithm={this.state.algorithm} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Graphapp;","class Stack<T> {\r\n    private arr: T[] = []\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n    push(item: T) {\r\n        this.arr.push(item);\r\n    }\r\n\r\n    pop(): T | undefined {\r\n        return this.arr.pop();\r\n    }\r\n\r\n    isEmpty(): boolean {\r\n        return this.arr.length === 0;\r\n    }\r\n}\r\n\r\nexport default Stack;","import INode from \"../model/Node\";\r\n\r\nabstract class Algorithm {\r\n    abstract findPath(graph: INode[][]): INode[][];\r\n\r\n    protected findStartNode(graph: INode[][]): INode {\r\n        let startNode: INode;\r\n\r\n        for(let i = 0; i < graph.length; i++) {\r\n            for(let j = 0; j < graph[i].length; j++) {\r\n                if(graph[i][j].start) {\r\n                    startNode = graph[i][j];\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return startNode!;\r\n    }\r\n\r\n    protected findEndNode(graph: INode[][]): INode {\r\n        let endNode: INode;\r\n\r\n        for(let i = 0; i < graph.length; i++) {\r\n            for(let j = 0; j < graph[i].length; j++) {\r\n                if(graph[i][j].end) {\r\n                    endNode = graph[i][j];\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return endNode!;\r\n    }\r\n\r\n    protected getAdjList(graph: INode[][]): INode[][][] {\r\n        const adjList: INode[][][] = [];\r\n\r\n        for(let i = 0; i < graph.length; i++) {\r\n            adjList[i] = []\r\n            for(let j = 0; j < graph[i].length; j++) {\r\n                adjList[i][j] = []\r\n                // exclude wall\r\n                if(!graph[i][j].wall) {\r\n\r\n                    // upper neighbour\r\n                    if(graph[i-1] && graph[i-1][j] && !graph[i-1][j].wall) {\r\n                        adjList[i][j].push(graph[i-1][j]);\r\n                    }\r\n\r\n                    // left neighbour\r\n                    if(graph[i][j-1] && !graph[i][j-1].wall) {\r\n                        adjList[i][j].push(graph[i][j-1]);\r\n                    } \r\n\r\n                    // lower neighbour\r\n                    if(graph[i+1] && graph[i+1][j] && !graph[i+1][j].wall) {\r\n                        adjList[i][j].push(graph[i+1][j]);\r\n                    }\r\n\r\n                    // right neighbour\r\n                    if(graph[i][j+1] && !graph[i][j+1].wall) {\r\n                        adjList[i][j].push(graph[i][j+1]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return adjList;\r\n    }\r\n}\r\n\r\nexport default Algorithm;","import { cursorTo } from 'readline';\r\nimport { visitEachChild } from 'typescript';\r\nimport Stack from '../helpers/Stack';\r\nimport INode from '../model/Node';\r\nimport Algorithm from './Algorithm'\r\n\r\nclass DFS extends Algorithm {\r\n\r\n    findPath(graph: INode[][]): INode[][] {\r\n        const nodes = [...graph];\r\n        const startNode = this.findStartNode(nodes);\r\n        const endNode = this.findEndNode(nodes);\r\n        const adjList = this.getAdjList(nodes);\r\n\r\n        const stack: Stack<INode> = new Stack();\r\n\r\n        stack.push(startNode);\r\n        let order: number = 1;\r\n\r\n        while(!stack.isEmpty()) {\r\n            const curr = stack.pop()!;\r\n\r\n            // reached the end\r\n            if(curr.x === endNode.x && curr.y === endNode.y) {\r\n                endNode.order = order;\r\n                break;\r\n            }\r\n\r\n            if(!curr.visited) {\r\n                curr.visited = true;\r\n                curr.order = order;\r\n                order++;\r\n                adjList[curr.x][curr.y].forEach((neighbour) => {\r\n                    stack.push(neighbour);\r\n                })\r\n\r\n            }\r\n\r\n            \r\n\r\n        }\r\n        return nodes;\r\n    }\r\n\r\n    public toString(): string {\r\n        return \"DFS\";\r\n    }\r\n}\r\n\r\nexport default DFS;","class Queue<T> {\r\n    private arr: T[] = [];\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n    enqueue(item: T) {\r\n        this.arr.push(item);\r\n    }\r\n\r\n    dequeue(): T | undefined {\r\n        return this.arr.shift();\r\n    }\r\n\r\n    isEmpty(): boolean {\r\n        return this.arr.length === 0;\r\n    }\r\n}\r\n\r\nexport default Queue;","import Queue from '../helpers/Queue';\r\nimport INode from '../model/Node';\r\nimport Algorithm from './Algorithm'\r\n\r\nclass BFS extends Algorithm {\r\n\r\n    findPath(graph: INode[][]): INode[][] {\r\n        const nodes = [...graph];\r\n        const startNode = this.findStartNode(nodes);\r\n        const endNode = this.findEndNode(nodes);\r\n        const adjList = this.getAdjList(nodes);\r\n\r\n        const queue: Queue<INode> = new Queue();\r\n\r\n        startNode.visited = true;\r\n        queue.enqueue(startNode);\r\n        let order: number = 1;\r\n\r\n        while(!queue.isEmpty()) {\r\n            const curr = queue.dequeue()!;\r\n            \r\n            // reached the end\r\n            if(curr.x === endNode.x && curr.y === endNode.y) {\r\n                endNode.order = order;\r\n                break;\r\n            }\r\n\r\n            adjList[curr.x][curr.y].forEach((neighbour) => {\r\n                if(!neighbour.visited) {\r\n                    neighbour.visited = true;\r\n                    queue.enqueue(neighbour);\r\n                    neighbour.order = order;\r\n                    order++;\r\n                }\r\n            })\r\n\r\n        }\r\n        return nodes;\r\n    }\r\n\r\n    public toString(): string {\r\n        return \"BFS\";\r\n    }\r\n}\r\n\r\nexport default BFS;","import Queue from \"./Queue\";\r\n\r\n\r\ninterface PrioItem<T> {\r\n    prio: number;\r\n    item: T;\r\n}\r\n\r\nclass PriorityQueue<T> {\r\n    arr: PrioItem<T>[] = [];\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n    enqueue(prio: number, item: T) {\r\n        this.arr.push({prio, item});\r\n        this.sort();\r\n    }\r\n\r\n    sort() {\r\n        this.arr.sort((a: PrioItem<T>, b: PrioItem<T>) => {\r\n            return a.prio - b.prio;\r\n        })\r\n    }\r\n\r\n    dequeue(): T | undefined {\r\n        return this.arr.shift()?.item;\r\n    }\r\n\r\n    isEmpty(): boolean {\r\n        return this.arr.length === 0;\r\n    }\r\n\r\n    contains(item: T): boolean {\r\n        let contains = false;\r\n        this.arr.forEach((itemInQ) => {\r\n            if(item == itemInQ.item) {\r\n                contains = true;\r\n                return;\r\n            }\r\n        })\r\n        return contains;\r\n    }\r\n\r\n    updateKey(newPrio: number, item: T) {\r\n        this.arr.forEach((itemInQ) => {\r\n            if(item == itemInQ.item) {\r\n                itemInQ.prio = newPrio;\r\n                return;\r\n            }\r\n        })\r\n        this.sort();\r\n    }\r\n}\r\n\r\nexport default PriorityQueue;","import { start } from 'repl';\r\nimport PriorityQueue from '../helpers/PriorityQueue';\r\nimport Queue from '../helpers/Queue';\r\nimport INode from '../model/Node';\r\nimport Algorithm from './Algorithm'\r\n\r\nclass Dijkstra extends Algorithm {\r\n\r\n    findPath(graph: INode[][]): INode[][] {\r\n        const nodes = [...graph];\r\n        const startNode = this.findStartNode(nodes);\r\n        const endNode = this.findEndNode(nodes);\r\n        const adjList = this.getAdjList(nodes);\r\n        \r\n\r\n        const prioQueue: PriorityQueue<INode> = new PriorityQueue();\r\n\r\n        nodes.forEach(arr => {\r\n            arr.forEach(node => {\r\n                node.distance = Infinity;\r\n                node.prevNode = undefined;\r\n            })\r\n        }) \r\n\r\n        startNode.distance = 0;\r\n        startNode.visited = true;\r\n\r\n        prioQueue.enqueue(startNode.distance, startNode);\r\n\r\n        while(!prioQueue.isEmpty()) {\r\n            const curr = prioQueue.dequeue()!;\r\n        \r\n            adjList[curr.x][curr.y].forEach((neighbour) => {\r\n                const alternativ = curr.distance! + this.distance(curr, neighbour);\r\n                if(alternativ < neighbour.distance!) {\r\n\r\n                    neighbour.distance = alternativ;\r\n                    neighbour.prevNode = curr;\r\n                    prioQueue.enqueue(neighbour.distance, neighbour);\r\n                }\r\n            })\r\n        }\r\n\r\n        // create shortest path\r\n        let path: INode[] = [endNode];\r\n        let curr = endNode;\r\n        while (curr.prevNode != undefined) {\r\n            curr = curr.prevNode;\r\n            path = [curr, ...path];\r\n        }\r\n\r\n        let order: number = 1;\r\n        // iterate through path and assign order & visited\r\n        for(let i = 0; i < path.length; i++) {\r\n            // no path found\r\n            if(endNode != path[0]) {\r\n                path[i].visited = true;\r\n                path[i].order = order;\r\n                order++;\r\n            }\r\n        }\r\n\r\n        return nodes;\r\n    }\r\n\r\n    private distance(a: INode, b: INode): number {\r\n        const distX = a.x - b.x;\r\n        const distY = a.y - b.y;\r\n        return Math.sqrt(Math.pow(distX,2) + Math.pow(distY,2));\r\n    }\r\n\r\n    public toString(): string {\r\n        return \"Dijkstra\";\r\n    }\r\n}\r\n\r\nexport default Dijkstra;","import PriorityQueue from '../helpers/PriorityQueue';\r\nimport INode from '../model/Node';\r\nimport Algorithm from './Algorithm'\r\n\r\nclass Astar extends Algorithm {\r\n\r\n    findPath(graph: INode[][]): INode[][] {\r\n        const nodes = [...graph];\r\n        const startNode = this.findStartNode(nodes);\r\n        const endNode = this.findEndNode(nodes);\r\n        const adjList = this.getAdjList(nodes);\r\n\r\n\r\n        const prioQueue: PriorityQueue<INode> = new PriorityQueue();\r\n        const closedList: Set<INode> = new Set();\r\n        \r\n        nodes.forEach(arr => {\r\n            arr.forEach(node => {\r\n                node.distance = 0;\r\n                node.prevNode = undefined;\r\n            })\r\n        }) \r\n\r\n        startNode.distance = 0;\r\n        prioQueue.enqueue(0, startNode);\r\n\r\n        do {\r\n            const curr = prioQueue.dequeue()!;\r\n\r\n            if(curr.x === endNode.x && curr.y === endNode.y) {\r\n                break;\r\n            }\r\n\r\n            curr.visited = true; \r\n\r\n            adjList[curr.x][curr.y].forEach((neighbour) => {\r\n                if(!neighbour.visited) {\r\n\r\n                    // g value for neighbour\r\n                    const value = curr.distance! + this.distance(curr,neighbour);\r\n\r\n                    // path is not better\r\n                    if(!(prioQueue.contains(neighbour) && value >= neighbour.distance!)) {\r\n                        neighbour.prevNode = curr;\r\n\r\n                    }\r\n\r\n                    // update\r\n                    neighbour.distance = value;\r\n\r\n                    const f = value + this.h(neighbour, endNode)\r\n\r\n                    if(prioQueue.contains(neighbour)) {\r\n                        // distance value has been updated, just sort prioQueue new\r\n                        prioQueue.updateKey(f, neighbour);\r\n                    } else {\r\n                        prioQueue.enqueue(f, neighbour)\r\n                    }\r\n                }\r\n            })\r\n\r\n        } while(!prioQueue.isEmpty())\r\n\r\n        // find path\r\n\r\n        // create shortest path\r\n        let path: INode[] = [endNode];\r\n        let curr = endNode;\r\n        while (curr.prevNode != undefined) {\r\n            curr = curr.prevNode;\r\n            path = [curr, ...path];\r\n        }\r\n\r\n        let order: number = 1;\r\n        // iterate through path and assign order & visited\r\n        for(let i = 0; i < path.length; i++) {\r\n            // no path found\r\n            if(endNode != path[0]) {\r\n                path[i].visited = true;\r\n                path[i].order = order;\r\n                order++;\r\n            }\r\n        }\r\n        return nodes;\r\n    }\r\n\r\n    private distance(a: INode, b: INode) {\r\n        const distX = a.x - b.x;\r\n        const distY = a.y - b.y;\r\n        return Math.sqrt(Math.pow(distX,2) + Math.pow(distY,2));\r\n    }\r\n\r\n\r\n    private h(neighbour: INode, endNode: INode): number {\r\n        // luftlinie\r\n        const distX = neighbour.x - endNode.x;\r\n        const distY = neighbour.y - endNode.y;\r\n        return Math.sqrt(Math.pow(distX,2) + Math.pow(distY,2));\r\n    }\r\n    \r\n    public toString(): string {\r\n        return \"A*\";\r\n    }\r\n}\r\n\r\nexport default Astar;","import React from \"react\";\r\nimport INode from \"../model/Node\";\r\nimport './Node.css'\r\n\r\n\r\ninterface NodeProps {\r\n    node: INode;\r\n    onMouseOver: (node: INode) => void;\r\n}\r\n\r\n\r\nclass Node extends React.Component<NodeProps> {\r\n\r\n    constructor(props: Readonly<NodeProps>) {\r\n      super(props);\r\n    }\r\n\r\n    render() {\r\n\r\n        let backgroundStyle: React.CSSProperties = {}\r\n        \r\n        if(this.props.node.start) {\r\n            backgroundStyle = {\r\n                backgroundColor: \"lightgreen\"\r\n            }\r\n        } else if(this.props.node.end) {\r\n            backgroundStyle = {\r\n                backgroundColor: \"red\"\r\n            }\r\n        } else if(this.props.node.wall) {\r\n            backgroundStyle = {\r\n                backgroundColor: \"grey\"\r\n            }\r\n        } else if(this.props.node.visited) {\r\n            backgroundStyle = {\r\n                backgroundColor: \"green\"\r\n            }\r\n        } else {\r\n            backgroundStyle = {\r\n                backgroundColor: \"lightblue\"\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div onMouseOver={() => this.props.onMouseOver(this.props.node)} className=\"node\" style={backgroundStyle}>\r\n                {this.props.node.order || this.props.node.order === 0 ? <p className=\"orderText\">{this.props.node.order}</p> : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Node;","import React from \"react\";\r\nimport './Grid.css'\r\nimport Node from \"../components/Node\"\r\nimport { Button } from \"react-bootstrap\";\r\nimport INode from \"../model/Node\";\r\nimport Algorithm from \"../algorithms/Algorithm\"\r\n\r\ninterface GridProps {\r\n    width: number;\r\n    height: number;\r\n    algorithm: Algorithm;\r\n}\r\n\r\ninterface GridState {\r\n    nodes: INode[][];\r\n    nodesVisited?: number;\r\n    holdMouseDown: boolean;\r\n    startX: number;\r\n    startY: number;\r\n    endX: number;\r\n    endY: number;\r\n}\r\n\r\n\r\nclass Grid extends React.Component<GridProps, GridState> {\r\n    private readonly STARTX: number = 10;\r\n    private readonly STARTY: number = 13;\r\n    private readonly ENDX: number = 40;\r\n    private readonly ENDY: number = 13;\r\n\r\n    constructor(props: Readonly<GridProps>) {\r\n      super(props);\r\n\r\n      this.state = {\r\n        nodes: this.initNodes(),\r\n        holdMouseDown: false,\r\n        startX: this.STARTX,\r\n        startY: this.STARTY,\r\n        endX: this.ENDX,\r\n        endY: this.ENDY\r\n      }\r\n    }\r\n\r\n    private initNodes(): INode[][] {\r\n        const nodes: INode[][] = [];\r\n\r\n        for(let i = 0; i < this.props.height; i++) {\r\n            nodes[i] = [];\r\n            for(let j = 0; j < this.props.width; j++) {\r\n                \r\n                const node: INode = {\r\n                    x: i,\r\n                    y: j,\r\n                    start: false,\r\n                    end: false,\r\n                    wall: false\r\n                }\r\n\r\n                \r\n                // x and y are interchanged\r\n                // state not defined yet use constants\r\n                if(i == this.STARTY && j == this.STARTX) {\r\n                    node.start = true;\r\n                } else if(i == this.ENDY && j == this.ENDX) {\r\n                    node.end = true;\r\n                }   \r\n                nodes[i][j] = node;\r\n            }\r\n        }\r\n        return nodes;\r\n    }\r\n\r\n    private calculatePath(): void {\r\n        this.clearOrder();\r\n        this.clearVisited();\r\n        this.setState({ nodesVisited: undefined})\r\n        const graphWithPath = this.props.algorithm.findPath(this.state.nodes);\r\n        this.setState({\r\n            nodes: graphWithPath,\r\n            nodesVisited: graphWithPath[this.state.endY][this.state.endX].order\r\n        })\r\n    }\r\n\r\n    private clearWalls() {\r\n        const newNodes = [...this.state.nodes];\r\n        newNodes.forEach((arr) => {\r\n            arr.forEach((node) => {\r\n                node.wall = false;\r\n            })\r\n        })\r\n        this.setState({\r\n            nodes: newNodes\r\n        })\r\n    }\r\n\r\n    private clearDistanceAndPrevNode() {\r\n        const newNodes = [...this.state.nodes];\r\n        newNodes.forEach((arr) => {\r\n            arr.forEach((node) => {\r\n                node.distance = undefined;\r\n                node.prevNode = undefined;\r\n            })\r\n        })\r\n        this.setState({\r\n            nodes: newNodes,\r\n            nodesVisited: undefined\r\n        })\r\n    }\r\n\r\n    private clearOrder() {\r\n        const newNodes = [...this.state.nodes];\r\n        newNodes.forEach((arr) => {\r\n            arr.forEach((node) => {\r\n                node.order = undefined;\r\n            })\r\n        })\r\n        this.setState({\r\n            nodes: newNodes,\r\n            nodesVisited: undefined\r\n        })\r\n    }\r\n\r\n    private clearVisited() {\r\n        const newNodes = [...this.state.nodes];\r\n        newNodes.forEach((arr) => {\r\n            arr.forEach((node) => {\r\n                node.visited = false;\r\n            })\r\n        })\r\n        this.setState({\r\n            nodes: newNodes,\r\n            nodesVisited: undefined\r\n        })\r\n    }\r\n\r\n    private clearEverything() {\r\n        this.clearWalls();\r\n        this.clearVisited();\r\n        this.clearOrder();\r\n        this.clearDistanceAndPrevNode();\r\n    }\r\n\r\n    private clearPath() {\r\n        this.clearVisited();\r\n        this.clearOrder();\r\n    }\r\n\r\n    private changeBackgroundWall(node: INode) {\r\n        if(this.state.holdMouseDown) {\r\n            const newNodes = [...this.state.nodes];\r\n            newNodes[node.x][node.y].wall = true;\r\n            this.setState({\r\n                nodes: newNodes\r\n            })\r\n        }\r\n    }\r\n\r\n    private changeStartNode(x: number, y: number): void {\r\n        const newNodes = [...this.state.nodes];\r\n        newNodes.forEach(arr => {\r\n            arr.forEach(node => {\r\n                // delete old start node\r\n                if(node.start) {\r\n                    node.start = false;\r\n                }\r\n\r\n                // set new startnode, x is height\r\n                if(node.x === y && node.y === x) {\r\n                    node.start = true;\r\n                }\r\n            })\r\n        })\r\n        this.setState({\r\n            nodes: newNodes,\r\n            startX: x,\r\n            startY: y\r\n        })\r\n    }\r\n\r\n    private changeEndNode(x: number, y: number): void {\r\n        const newNodes = [...this.state.nodes];\r\n        newNodes.forEach(arr => {\r\n            arr.forEach(node => {\r\n                // delete old start node\r\n                if(node.end) {\r\n                    node.end = false;\r\n                }\r\n\r\n                // set new startnode, x is height\r\n                if(node.x === y && node.y === x) {\r\n                    node.end = true;\r\n                }\r\n                \r\n\r\n            })\r\n        })\r\n        this.setState({\r\n            nodes: newNodes,\r\n            endX: x,\r\n            endY: y\r\n        })\r\n    }\r\n    \r\n\r\n\r\n    private resetStartAndEnd() {\r\n        this.changeStartNode(this.STARTX, this.STARTY);\r\n        this.changeEndNode(this.ENDX, this.ENDY);\r\n    }\r\n\r\n\r\n    render() {\r\n        const gridStyle: React.CSSProperties = {\r\n            gridTemplateColumns: `repeat(${this.props.width}, minmax(10px, 1fr))`,\r\n            gridTemplateRows: `repeat(${this.props.height}, minmax(10px, 1fr))`\r\n        }\r\n\r\n        const nodesElements: JSX.Element[] = []\r\n\r\n        for(let i = 0; i < this.props.height; i++) {\r\n            for(let j = 0; j < this.props.width; j++) {\r\n                nodesElements.push(<Node key={`${i},${j}`} node={this.state.nodes[i][j]} onMouseOver={this.changeBackgroundWall.bind(this)} />);\r\n            }\r\n        } \r\n        \r\n        return (\r\n\r\n            \r\n            \r\n            <div className=\"gridBtn\">\r\n\r\n                <div className=\"startEndInput\">\r\n                    <label htmlFor=\"start\">\r\n                        Start: <input type=\"number\" min=\"0\" max=\"50\" name=\"start\" placeholder=\"x\" onChange={event => this.changeStartNode(Number.parseInt(event.target.value), this.state.startY)}></input>\r\n                        <input type=\"number\" min=\"0\" max=\"25\" placeholder=\"y\" onChange={event => this.changeStartNode(this.state.startX, Number.parseInt(event.target.value))}></input>\r\n                    </label>\r\n                    \r\n                    <label htmlFor=\"end\" className=\"labelEnd\">\r\n                        End: <input type=\"number\" min=\"0\" max=\"50\" placeholder=\"x\" onChange={event => this.changeEndNode(Number.parseInt(event.target.value), this.state.endY)}></input>\r\n                        <input  type=\"number\" min=\"0\" max=\"25\" placeholder=\"y\" onChange={event => this.changeEndNode(this.state.endX, Number.parseInt(event.target.value))}></input>\r\n                    </label>\r\n\r\n                    <Button className=\"btn btn-warning\" onClick={() => this.resetStartAndEnd()}>Reset Start and End</Button>\r\n                </div>\r\n                \r\n\r\n                <div className=\"buttons\">\r\n                    <Button className=\"btn btn-success\" onClick={() => this.calculatePath()}>Calculate!</Button>\r\n                    <Button className=\"btn btn-warning\" onClick={() => this.clearWalls()}>Clear Walls</Button>\r\n                    <Button className=\"btn btn-secondary\" onClick={() => this.clearPath()}>Clear Path</Button>\r\n                    <Button className=\"btn btn-danger\"  onClick={() => this.clearEverything()}>Clear everything</Button>\r\n                </div>\r\n                <p id=\"infoText\">Hold down the mouse on the grid to place walls!</p>\r\n                <div onMouseDown={() => this.setState({holdMouseDown: true})} onMouseUp={() => this.setState({holdMouseDown: false})} className=\"grid-container\" style={gridStyle}>\r\n                {nodesElements}\r\n                </div>\r\n                {this.state.nodesVisited ? <p className=\"pathLengthText\">Länge des gefundenen Pfades: {this.state.nodesVisited}</p> : \r\n                <p className=\"pathLengthText\">Keinen Pfad zum Endknoten gefunden!</p>}\r\n            </div>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default Grid;","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Graphapp from './pages/Graphapp';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Graphapp />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}